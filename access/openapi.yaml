openapi: 3.0.0
info:
  version: v1
  title: External Access Integration API's
  description: Can integrate any 3rd party access solution with our system. We
    will send the partner id and a secret key to partners to validate each API
    call. <br/>Access Operations:- Realtime call to Aeria for access movements
    and operability status update <br/>Webhook Operations:- Access Group and
    Pass configuration for access partner <br/>Full Integration steps at <a
    href='https://github.com/aeria-world/partner-integrations/blob/main/access/README.md'>Documentation</a>
tags:
  - name: Access Operations
    description: APIs For Access Operations
  - name: Webhook Operations
    description: APIs For Webhook Operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT token
  
  parameters:
    IntegrationIdHeader:
      name: x-integration-id
      in: header
      required: true
      schema:
        type: string
        example: integration0001-0000-0000-0000-000000000000

  schemas:
    DaysOfWeek:
      type: array
      items:
        type: string
      example:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    RepeatInWeeks:
      type: array
      items:
        type: integer
        minimum: 1
        maximum: 5
      example: 
        - 2
        - 4
    Movement:
      type: object
      properties:
        userId:
          type: string
          example: user0001-0000-0000-0000-000000000000
        timestamp:
          type: string
          example: 2024-01-01T12:00:00.000
        authMode:
          type: string
          example: ble | nfc | qr | fr | pin | passcode
        code:
          type: string
          example: 1234567890
        doorId:
          type: string
          example: door0001-0000-0000-0000-000000000000
        movementType:
          type: string
          example: enter | exit
        allowed:
          type: boolean
          example: true
      required:
        - userId
        - timestamp
        - authMode
        - code
        - doorId
        - movementType
        - allowed
    Door:
      type: object
      properties:
        referenceCode:
          type: string
          example: door0001-0000-0000-0000-000000000000
        name:
          type: string
          example: Door 1
        status:
          type: string
          example: active | inactive | offline | unknown | maintenance | open | closed
        entryAuthModes:
          type: array
          items:
            type: string
            example: ble | nfc | qr | fr | pin | passcode
        exitAuthModes:
          type: array
          items:
            type: string
            example: ble | nfc | qr | fr | pin | passcode
    Timezone:
      type: object
      properties:
        id:
          type: string
          example: timezone0001-0000-0000-0000-000000000000
        name:
          type: string
          example: Full day shift
        timings:
          type: array
          items:
            type: object
            properties:
              daysOfWeek:
                $ref: '#/components/schemas/DaysOfWeek'
              skipWeeks:
                $ref: '#/components/schemas/RepeatInWeeks'
              hours:
                type: array
                items:
                  type: object
                  properties:
                    startTime:
                      type: string
                      example: 00:00
                    endTime:
                      type: string
                      example: 23:59
    AccessGroup:
      type: object
      properties:
        id:
          type: string
          example: accessgroup0001-0000-0000-0000-000000000000
        name:
          type: string
          example: Access Group 1
        doorAccess:
          type: array
          items:
            type: object
            properties:
              doorId:
                type: string
                example: door0001-0000-0000-0000-000000000000
              timeZoneId:
                type: string
                example: timezone0001-0000-0000-0000-000000000000
    UserAccessGroup:
      type: array
      items:
        type: object
        properties:
          accessGroupId:
            type: string
            example: accessgroup0001-0000-0000-0000-000000000000
          validFrom:
            type: string
            example: 2020-01-01T12:00:00.000
          validTill:
            type: string
            example: 2020-01-01T12:00:00.000
    UserIdentification:
      type: object
      properties:
        mode:
          type: string
          example: ble | nfc | qr | fr | pin | passcode | rfid
        code:
          type: string
          example: 1234567890
    UserIdentificationWithValidity:
      allOf:
        - $ref: '#/components/schemas/UserIdentification'
        - type: object
          properties:
            validFrom:
              type: string
              example: 2020-01-01T12:00:00.000
            validTill:
              type: string
              example: 2020-01-01T12:00:00.000
  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized access

security:
  - BearerAuth: []

paths:
  /access/v1/integration/{integrationId}/movement-logs:
    post:
      tags:
        - Access Operations
      summary: Api for sending movement logs
      description: Called when a known credential is provided at the access point to facilitate movement
      parameters:
        - in: path
          name: integrationId
          required: true
          schema:
            type: string
            example: integration0001-0000-0000-0000-000000000000
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Movement'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401': 
          $ref: '#/components/responses/Unauthorized'

  /<webhook:getDoors>:
    get:
      tags:
        - Webhook Operations
      summary: External webhook for getting doors
      description: Get all doors for an integration from the partner ecosystem
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Door'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:addOrUpdateTimeZoneUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for adding a time zone to the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timezone'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:getAllTimezonesUrl>:
    get:
      tags:
        - Webhook Operations
      summary: External webhook for getting all timezones
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timezone'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:deleteTimeZoneUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for deleting a time zone from the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: timezone0001-0000-0000-0000-000000000000
              required:
                - id
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:addOrUpdateAccessGroupUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for adding an access group to the partner of updating it if it already exists
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/AccessGroup'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:removeAccessGroupUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for removing an access group from the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: accessgroup0001-0000-0000-0000-000000000000
              required:
                - id
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:addOrUpdateUserUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for adding a user to the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    userId:
                      type: string
                      example: user0001-0000-0000-0000-000000000000
                    accessGroups:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserAccessGroup'
                    validFrom:
                      type: string
                      example: 2020-01-01T12:00:00.000
                    validTill:
                      type: string
                      example: 2020-01-01T12:00:00.000
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:removeUserUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for removing a user from the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: user0001-0000-0000-0000-000000000000
              required:
                - id
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:addUserIdentificationUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for adding a user identification to the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    userId:
                      type: string
                      example: user01-0000-0000-0000-000000000000
                - $ref: '#/components/schemas/UserIdentificationWithValidity'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:removeUserIdentificationUrl>:
    post:
      tags:
        - Webhook Operations
      summary: External webhook for removing a user identification from the partner
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    userId:
                      type: string
                      example: user01-0000-0000-0000-000000000000
                - $ref: '#/components/schemas/UserIdentification'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:getAllUserIdentificationsUrl>:
    get:
      tags:
        - Webhook Operations
      summary: External webhook for getting all user identifications
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
        - in: query
          name: userId
          required: true
          schema:
            type: string
            example: user01-0000-0000-0000-000000000000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserIdentificationWithValidity'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:getMovementLogsUrl>:
    get:
      tags:
        - Webhook Operations
      summary: External webhook for getting access logs, will be called every 5-10 minutes to get the latest movements
      parameters:
        - $ref: '#/components/parameters/IntegrationIdHeader'
        - in: query
          name: startTime
          required: true
          schema:
            type: string
            example: 2020-01-01T12:00:00.000
        - in: query
          name: endTime
          required: true
          schema:
            type: string
            example: 2020-01-01T12:00:00.000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movement'
        '401':
          $ref: '#/components/responses/Unauthorized'
