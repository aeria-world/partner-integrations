openapi: 3.0.0
info:
  version: v1
  title: Parking Deep Integration API's
  description: "Deep integration APIs for parking. Aeria handles the authorization and price calculation, while the partner handles the parking operations."
tags: 
  - name: Parking Operations
    description: APIs For Parking Operations
  - name: Webhook Operations
    description: APIs For Webhook Operations

components:
  parameters:
    signatureHeader:
      in: header
      name: x-signature
      required: true
      schema:
        type: string
  schemas:
    Vehicle:
      type: object
      properties:
        registrationNumber:
          type: string
          example: MH01AB1234
        type:
          type: string
          example: 4w
          anyOf:
            - type: string
              enum: [ 4w, 2w ]
        model:
          type: string
          example: Honda City
          nullable: true
        color:
          type: string
          example: red
          nullable: true
        fastagNo:
          type: string
          example: 12345
          nullable: true
        geotaagNo:
          type: string
          example: 12345
          nullable: true
      required:
        - registrationNumber
        - type
    Bay:
      type: object
      properties:
        name:
          type: string
          example: A-14
        location:
          type: string
          example: Green Zone, Basement 1
      required:
        - location
    Availability:
      type: object
      properties:
        total:
          type: number
          example: 10
        available:
          type: number
          example: 5
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Collection:
      type: object
      properties:
        amount:
          type: number
          example: 100
          description: The amount that was collected from the vehicle at the time of entry or exit
        mode:
          type: string
          example: cash
          anyOf:
            - type: string
              enum: [ cash, card, upi, other ]
    ExitData:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        entryTime:
          type: string
          example: 2022-01-01T00:00:00Z
        exitTime:
          type: string
          example: 2022-01-01T02:00:00Z
        totalFare:
          type: number
          example: 100
        preCollectedFare:
          type: number
          example: 50
        categoryId:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        validTill:
          type: string
          example: 2022-01-01T00:00:00Z
          description: The time till which the total fare is valid. This is the time till which the vehicle can exit without incurring any additional charges.
    IntegrationNotFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 422
        response:
          type: object
          properties:
            message:
              type: string
              example: integration not found
            code:
              type: integer
              example: 710
    BarrierNotFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 422
        response:
          type: object
          properties:
            message:
              type: string
              example: barrier not found
            code:
              type: integer
              example: 711
    NoBayAvailable:
      type: object
      properties:
        statusCode:
          type: integer
          example: 410
        response:
          type: object
          properties:
            message:
              type: string
              example: No bay available
            code:
              type: integer
              example: 712
    NoParkingFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 406
        response:
          type: object
          properties:
            message:
              type: string
              example: No parking found for the integration
            code:
              type: integer
              example: 713
    VehicleNotWhitelisted:
      type: object
      properties:
        statusCode:
          type: integer
          example: 406
        response:
          type: object
          properties:
            message:
              type: string
              example: Vehicle is not whitelisted
            code:
              type: integer
              example: 714

  responses:
    Success:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 200
              response:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 401
              response:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access
                  code:
                    type: integer
                    example: 401
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 403
              response:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden access
                  code:
                    type: integer
                    example: 403
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 500
              response:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
                  code:
                    type: integer
                    example: 500
    UnprocessableContent:
      description: Unprocessable Content
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/IntegrationNotFound'
              - $ref: '#/components/schemas/BarrierNotFound'
    DataNotFound:
      description: Data not found
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/NoParkingFound'
              - $ref: '#/components/schemas/VehicleNotWhitelisted'

    NoBayAvailable:
      description: No bay available
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 410
              response:
                $ref: '#/components/schemas/NoBayAvailable'
  
paths:
  /partner/v1/parking/category-availabilty:
    get:
      tags: 
        - Parking Operations
      summary: Api for getting category summary
      description: Api for getting category summary
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            4w:
                              $ref: '#/components/schemas/Availability'
                            2w:
                              $ref: '#/components/schemas/Availability'
                      defaultVisitorCategoryId:
                        type: string
                    example:
                      categories:
                        - id: 00000000-0000-0000-0000-000000000000
                          name: Accenture
                          4w:
                            total: 10
                            available: 5
                          2w:
                            total: 10
                            available: 5
                        - id: 00000000-0000-0000-0000-000000000001
                          name: Visitor
                          4w:
                            total: 10
                            available: 5
                          2w:
                            total: 10
                            available: 5
                      defaultVisitorCategoryId: 00000000-0000-0000-0000-000000000001
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422': 
          $ref: '#/components/responses/UnprocessableContent'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /partner/v1/parking/request-entry:
    post:
      tags: 
        - Parking Operations
      summary: Api for requesting entry of a vehicle
      description: Aeria will handle the authorization based category of the pre registered vehicle and the bay availability. For successful authorization, Aeria will send a bay detail to the partner that will be displayed on the screen at the entry
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicle:
                  $ref: '#/components/schemas/Vehicle'
                barrierId:
                  type: string
                  example: some-barrier-id
              required:
                - vehicle
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    required:
                      - id
                      - entryTime
                      - bay
                      - category
                    properties:
                      id:
                        type: string
                        example: 00000000-0000-0000-0000-000000000000
                      entryTime:
                        type: string
                        example: 2022-01-01T00:00:00Z
                      bay:
                        $ref: '#/components/schemas/Bay'
                      category: 
                        $ref: '#/components/schemas/Category'
                        example:
                          id: 00000000-0000-0000-0000-000000000000
                          name: Reserved
                      pendingCollectionAmount:
                        type: number
                        example: 0
                        description: The amount to be collected for the vehicle at the time of entry
                      validTill:
                        type: string
                        example: 2022-01-01T00:00:00Z
                        description: The time till which this approval is valid. The bay is blocked for the vehicle till this time. Typically 2 minutes for each request.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '406':
          $ref: '#/components/responses/DataNotFound'
        '410':
          $ref: '#/components/responses/NoBayAvailable'
        '422':
          $ref: '#/components/responses/UnprocessableContent'
        '500':
          $ref: '#/components/responses/InternalServerError'
                    
  /partner/v1/parking/request-exit:
    post:
      tags: 
        - Parking Operations
      summary: Api for requesting exit of a vehicle
      description: Aeria will handle the authorization based on the pre registered vehicle and the exit time. For successful authorization, Aeria will send the fare details to the partner that will be displayed on the screen at the exit and collect the fare
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleNo:
                  type: string
                  example: DL01AA0007
                barrierId:
                  type: string
                  example: some-barrier-id
              required:
                - vehicleNo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    $ref: '#/components/schemas/ExitData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableContent'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /partner/v1/parking/movement-logs:
    post:
      tags: 
        - Parking Operations
      summary: Log the entry and exit of a vehicle
      description: Partner will log the entry and exit of a vehicle that was allowed offline
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
                  vehicleNo:
                    type: string
                    example: DL01AA0007
                  time:
                    type: string
                    example: 2022-01-01T00:00:00Z
                  type:
                    type: string
                    example: entry
                    anyOf:
                      - type: string
                        enum: [ entry, exit ]
                  categoryId:
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
                  barrierId:
                    type: string
                    example: some-barrier-id
                  collection:
                    $ref: '#/components/schemas/Collection'
                required:
                  - vehicleNo
                  - time
                  - type
                  - categoryId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  response:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Success
                      code:
                        type: integer
                        example: 0
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 00000000-0000-0000-0000-000000000000
                              description: vehicle log id
                            registrationNumber:
                              type: string
                              example: MH01AB1234
                              description: registration number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableContent'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /partner/v1/parking/manual-exit:
    post:
      tags: 
        - Parking Operations
      summary: Api for manual exit of a vehicle
      description: Api for manual exit of a vehicle
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleNo:
                  type: string
                  example: DL01AA0007
                entryTime:
                  type: string
                  example: 2022-01-01T00:00:00Z
                exitTime:
                  type: string
                  example: 2022-01-01T02:00:00Z
                remark:
                  type: string
                  example: "Manual exit"
                barrierId:
                  type: string
                  example: some-barrier-id
              required:
                - vehicleNo
                - entryTime
                - exitTime
                - barrierId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    $ref: '#/components/schemas/ExitData'
        '422':
          $ref: '#/components/responses/UnprocessableContent'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
# Webhook Operations
                    
  /<webhook:allowEntry>:
    post:
      tags: 
        - Webhook Operations
      summary: Allow entry of a vehicle at the barrier
      description: Aeria will send a request to the partner to allow entry of a vehicle at the barrier
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationNumber:
                  type: string
                  example: MH01AB1234
                validTill:
                  type: string
                  example: 2022-01-01T00:00:00Z
                barrierId:
                  type: string
                  example: barrier1-0000-0000-0000-000000000000
              required:
                - registrationNumber
                - validTill
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:allowExit>:
    post:
      tags: 
        - Webhook Operations
      summary: Allow exit of a vehicle at the barrier
      description: Aeria will send a request to the partner to allow exit of a vehicle at the barrier
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationNumber:
                  type: string
                  example: MH01AB1234
                vehicleType:
                  type: string
                  example: 4w
                  anyOf:
                    - type: string
                      enum: [ 4w, 2w ]
                totalFare:
                  type: number
                  example: 100
                validTill:
                  type: string
                  example: 2022-01-01T00:00:00Z
                barrierId:
                  type: string
                  example: some-barrier-id
              required:
                - registrationNumber
                - vehicleType
                - totalFare
                - validTill
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /<webhook:addWhitelistReservedUser>:
    post:
      tags: 
        - Webhook Operations
      summary: Add a user to the whitelist, update the registration numbers and parallel entries if already present
      description: Aeria will send a request to the partner to add a user to the whitelist
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                integrationId:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                userId:
                  type: string
                  example: user1-0000-0000-0000-000000000000
                allowedRegistartionNumbers:
                  type: array
                  items:
                    type: string
                    example: MH01AB1234
                vehicleType:
                  type: string
                  example: 4w
                  anyOf:
                    - type: string
                      enum: [ 4w, 2w ]
                validFrom:
                  type: string
                  example: 2022-01-01T00:00:00Z
                validTill:
                  type: string
                  example: 9999-12-31T23:59:59Z
                bay:
                  description: The bay to be alloted to the user when booking
                  $ref: '#/components/schemas/Bay'
              required:
                - integrationId
                - userId
                - registeredVehicles
                - bay
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /<webhook:addWhitelistFlexiUser>:
    post:
      tags: 
        - Webhook Operations
      summary: Add a user to the whitelist for flexi parking
      description: Aeria will send a request to the partner to add a user to the whitelist
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                integrationId:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                userId:
                  type: string
                  example: user1-0000-0000-0000-000000000000
                allowedRegistartionNumbers:
                  type: array
                  items:
                    type: string
                    example: MH01AB1234
                vehicleType:
                  type: string
                  example: 4w
                  anyOf:
                    - type: string
                      enum: [ 4w, 2w ]
                validFrom:
                  type: string
                  example: 2022-01-01T00:00:00Z
                validTill:
                  type: string
                  example: 9999-12-31T23:59:59Z
                flexiCategoryIds:
                  type: array
                  items:
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
                  description: Count to be deducted for flexi parking from first category with available bays
              required:
                - integrationId
                - userId
                - registeredVehicles
                - flexiCategoryIds
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /<webhook:removeWhitelistUser>:
    post:
      tags: 
        - Webhook Operations
      summary: Remove a user from the whitelist
      description: Aeria will send a request to the partner to remove a user from the whitelist
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                integrationId:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                userId:
                  type: string
                  example: user1-0000-0000-0000-000000000000
              required:
                - integrationId
                - userId
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /<webhook:addBooking>:
    post:
      tags: 
        - Webhook Operations
      summary: Add a booking for a user
      description: Aeria will send a request to the partner to add a booking for a user
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                integrationId:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                bookingId:
                  type: string
                  example: user1-0000-0000-0000-000000000000
                allowedRegistartionNumbers:
                  type: array
                  items:
                    type: string
                    example: MH01AB1234
                vehicleType:
                  type: string
                  example: 4w
                  anyOf:
                    - type: string
                      enum: [ 4w, 2w ]
                validFrom:
                  type: string
                  example: 2022-01-01T00:00:00Z
                validTill:
                  type: string
                  example: 2022-01-01T02:00:00Z
                bay:
                  $ref: '#/components/schemas/Bay'
              required:
                - integrationId
                - bookingId
                - allowedRegistartionNumbers
                - vehicleType
                - validFrom
                - validTill
                - bay
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /<webhook:removeBooking>:
    post:
      tags: 
        - Webhook Operations
      summary: Remove a booking for a user
      description: Aeria will send a request to the partner to remove a booking for a user
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                integrationId:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                bookingId:
                  type: string
                  example: booking1-0000-0000-0000-000000000000
              required:
                - integrationId
                - bookingId
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /<webhook:getLogs>:
    get:
      tags: 
        - Webhook Operations
      summary: Get the logs of the integration
      description: Aeria will send a request to the partner to get the logs of the integration
      parameters:
        - $ref: '#/components/parameters/signatureHeader'
        - in: query
          name: integrationId
          required: true
          schema:
            type: string
          description: The integration id
        - in: query
          name: from
          required: true
          schema:
            type: string
            format: date-time
          description: The start time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
            default: now()
          description: The end time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        registrationNumber:
                          type: string
                          example: MH01AB1234
                        time:
                          type: string
                          example: 2022-01-01T00:00:00Z
                        type:
                          type: string
                          example: entry
                          anyOf:
                            - type: string
                              enum: [ entry, exit ]
                        categoryId:
                          type: string
                          example: 00000000-0000-0000-0000-000000000000
        '401':
          $ref: '#/components/responses/Unauthorized' 