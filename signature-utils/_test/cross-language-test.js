const fs = require('fs');
const path = require('path');
const { generateSignature, validateSignature } = require('../javascript/javascript');

// Load test data
const testDataPath = path.join(__dirname, 'test-data.json');
const testData = JSON.parse(fs.readFileSync(testDataPath, 'utf8'));

// Override Date.now() to use fixed timestamps for consistent testing
const originalDateNow = Date.now;

function runCrossLanguageTests() {
    console.log('=== JavaScript Cross-Language Signature Tests ===\n');
    
    const results = {
        generated: {},
        validationResults: {}
    };
    
    // Generate signatures for each test case
    testData.testCases.forEach((testCase, index) => {
        console.log(`Test Case ${index + 1}: ${testCase.name}`);
        
        // Mock timestamp for consistent results
        Date.now = () => testCase.fixedTimestamp;
        
        try {
            const signature = generateSignature(
                testCase.body, 
                testCase.integrationId, 
                testCase.secretKey
            );
            
            results.generated[testCase.integrationId] = signature;
            console.log(`  Generated: ${signature}`);
            
            // Validate the signature we just generated
            const isValid = validateSignature(
                signature,
                testCase.body,
                testCase.integrationId,
                testCase.secretKey,
                300000 // 5 minute tolerance
            );
            
            console.log(`  Self-validation: ${isValid ? 'PASS' : 'FAIL'}`);
            
            if (!isValid) {
                console.error(`  ERROR: Self-validation failed for ${testCase.integrationId}`);
            }
            
        } catch (error) {
            console.error(`  ERROR: ${error.message}`);
        }
        
        console.log('');
    });
    
    // Restore original Date.now
    Date.now = originalDateNow;
    
    // Test validation of signatures from other languages (if available)
    console.log('=== Cross-Language Validation Tests ===');
    
    // Try to load signatures generated by other languages
    const signatureFiles = [
        'python-generated-signatures.json',
        'php-generated-signatures.json',
        'java-generated-signatures.json',
        'go-generated-signatures.json',
        'csharp-generated-signatures.json',
        'ruby-generated-signatures.json',
        'rust-generated-signatures.json',
        'typescript-generated-signatures.json'
    ];
    
    signatureFiles.forEach(filePath => {
        const fullPath = path.join(__dirname, filePath);
        if (fs.existsSync(fullPath)) {
            try {
                const otherSignatures = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
                const language = path.basename(filePath, '-generated-signatures.json');
                
                console.log(`\nValidating signatures from ${language}:`);
                
                testData.testCases.forEach(testCase => {
                    if (otherSignatures[testCase.integrationId]) {
                        const isValid = validateSignature(
                            otherSignatures[testCase.integrationId],
                            testCase.body,
                            testCase.integrationId,
                            testCase.secretKey,
                            300000
                        );
                        
                        console.log(`  ${testCase.integrationId}: ${isValid ? 'PASS' : 'FAIL'}`);
                    }
                });
            } catch (error) {
                console.error(`Error reading ${filePath}: ${error.message}`);
            }
        }
    });
    
    // Save our generated signatures for other languages to validate
    const outputPath = path.join(__dirname, 'javascript-generated-signatures.json');
    fs.writeFileSync(outputPath, JSON.stringify(results.generated, null, 2));
    console.log(`\nGenerated signatures saved to: ${outputPath}`);
    
    return results;
}

// Run tests if this file is executed directly
if (require.main === module) {
    runCrossLanguageTests();
}

module.exports = { runCrossLanguageTests };
