#!/usr/bin/env python3

import json
import os
import sys
import time
from pathlib import Path

# Add the python directory to Python path to import our module
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'python'))

from python import generate_signature, validate_signature

def load_test_data():
    """Load test data from the current directory."""
    test_data_path = Path(__file__).parent / 'test-data.json'
    with open(test_data_path, 'r') as f:
        return json.load(f)

def run_cross_language_tests():
    """Run cross-language signature tests."""
    print('=== Python Cross-Language Signature Tests ===\n')
    
    test_data = load_test_data()
    results = {
        'generated': {},
        'validation_results': {}
    }
    
    # Store original time function
    original_time = time.time
    
    try:
        # Generate signatures for each test case
        for i, test_case in enumerate(test_data['testCases']):
            print(f"Test Case {i + 1}: {test_case['name']}")
            
            # Mock timestamp for consistent results
            time.time = lambda: test_case['fixedTimestamp'] / 1000.0
            
            try:
                signature = generate_signature(
                    test_case['body'],
                    test_case['integrationId'],
                    test_case['secretKey']
                )
                
                results['generated'][test_case['integrationId']] = signature
                print(f"  Generated: {signature}")
                
                # Validate the signature we just generated
                is_valid = validate_signature(
                    signature,
                    test_case['body'],
                    test_case['integrationId'],
                    test_case['secretKey'],
                    300000  # 5 minute tolerance
                )
                
                print(f"  Self-validation: {'PASS' if is_valid else 'FAIL'}")
                
                if not is_valid:
                    print(f"  ERROR: Self-validation failed for {test_case['integrationId']}")
                    
            except Exception as error:
                print(f"  ERROR: {str(error)}")
            
            print('')
        
    finally:
        # Restore original time function
        time.time = original_time
    
    # Test validation of signatures from other languages
    print('=== Cross-Language Validation Tests ===')
    
    # Try to load signatures generated by other languages
    signature_files = [
        'javascript-generated-signatures.json',
        'php-generated-signatures.json',
        'java-generated-signatures.json',
        'go-generated-signatures.json',
        'csharp-generated-signatures.json',
        'ruby-generated-signatures.json',
        'rust-generated-signatures.json',
        'typescript-generated-signatures.json'
    ]
    
    for file_path in signature_files:
        full_path = Path(__file__).parent / file_path
        if full_path.exists():
            try:
                with open(full_path, 'r') as f:
                    other_signatures = json.load(f)

                language = file_path.replace('-generated-signatures.json', '')
                print(f"\nValidating signatures from {language}:")
                
                for test_case in test_data['testCases']:
                    integration_id = test_case['integrationId']
                    if integration_id in other_signatures:
                        is_valid = validate_signature(
                            other_signatures[integration_id],
                            test_case['body'],
                            integration_id,
                            test_case['secretKey'],
                            300000
                        )
                        
                        print(f"  {integration_id}: {'PASS' if is_valid else 'FAIL'}")
                        
            except Exception as error:
                print(f"Error reading {file_path}: {str(error)}")
    
    # Save our generated signatures for other languages to validate
    output_path = Path(__file__).parent / 'python-generated-signatures.json'
    with open(output_path, 'w') as f:
        json.dump(results['generated'], f, indent=2)
    
    print(f"\nGenerated signatures saved to: {output_path}")
    
    return results

if __name__ == '__main__':
    run_cross_language_tests()
